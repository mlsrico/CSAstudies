library(devtools)
use_r("tablena")
check()
check()
check()
check()
check()
check()
check()
install()
load_all()
tablena(iris$Species)
exists("tablena", where = globalenv(), inherits = FALSE)
document()
document()
?tablena
x <- c("a", "a", "a", "b", "b", "c", "d", "d")
tablena(x)
?tablena
document()
?tablena
document()
document()
?tablena
x <- c("a", "a", "a", "b", "NA", "c", "N", "d")
tablena(x)
x <- c("a", "a", "a", "b", NA, "c", NA, "d")
tablena(x)
document()
?tablena
document()
?tablena
document()
?tablena
install()
use_r("CleanLog")
test <- iris %>% mutate(set = species=="Setosa")
library(tidyverse)
test <- iris %>% mutate(set = species=="Setosa")
test <- iris %>% mutate(set = Species=="Setosa")
test
glm(set ~ Species, data = test, family = "binomial")
glm(set ~ Species, data = test, family = "binomial") %>% class
res <- glm(set ~ Species, data = test, family = "binomial") %>% class
clas(res) == "glm"
class(res) == "glm"
"glm" %in% class(res)
class(res)
res
res <- glm(set ~ Species, data = test, family = "binomial")
"glm" %in% class(res)
class(res) == "glm"
document()
res
CleanLog(m_crude)
CleanLog <- function(res, alpha = 0.5){
if("glm" %in% class(res)){
lvl <- 1-alpha
# ci95
ci95 <- exp(confint.default(res, level = lvl))
# get objects
sres <- summary(res)
dres <- sres$coefficients %>% as.data.frame()
# get exp & pvalue
exp_p <- dres %>%
mutate(rn = row.names(dres),
expcoef = round(exp(`Estimate`), 2),
pval = round(`Pr(>|z|)`, 3)) %>%
dplyr::select(rn, expcoef, pval) %>%
filter(rn!="(Intercept)")
# get 95%CI
coif <- ci95 %>%
as.data.frame() %>%
mutate(rn = row.names(dres),
ci_inf = round(`2.5 %`, 2),
ci_sup = round(`97.5 %`, 2)) %>%
mutate(ci_both = paste("(", ci_inf, " - ", ci_sup, sep = "")) %>%
dplyr::select(rn, ci_both) %>%
filter(rn!="(Intercept)")
# combine
all_coefs <- left_join(exp_p, coif, by = "rn") %>%
mutate(logres = paste(expcoef, " ", ci_both, "; ", pval, ")", sep = "")) %>%
dplyr::select(rn, logres)
return(all_coefs)
} else {
stop("The model should be a logistic regression.")
}
}
CleanLog(m_crude)
CleanLog(res)
CleanLog(res, alpha = 0.5)
CleanLog("xx", alpha = 0.5)
library(survival)
lung
res <- glm(sex ~ age, data = lung, family = "binomial")
lung <- lung %>% mutate(outcome = sex==1)
res <- glm(outcome ~ age, data = lung, family = "binomial")
res
CleanLog(res)
CleanLog(res, alpha = 0.5)
CleanLog <- function(res){
if("glm" %in% class(res)){
# ci95
ci95 <- exp(confint.default(res, level = 0.95))
# get objects
sres <- summary(res)
dres <- sres$coefficients %>% as.data.frame()
# get exp & pvalue
exp_p <- dres %>%
mutate(rn = row.names(dres),
expcoef = round(exp(`Estimate`), 2),
pval = round(`Pr(>|z|)`, 3)) %>%
dplyr::select(rn, expcoef, pval) %>%
filter(rn!="(Intercept)")
# get 95%CI
coif <- ci95 %>%
as.data.frame() %>%
mutate(rn = row.names(dres),
ci_inf = round(`2.5 %`, 2),
ci_sup = round(`97.5 %`, 2)) %>%
mutate(ci_both = paste("(", ci_inf, " - ", ci_sup, sep = "")) %>%
dplyr::select(rn, ci_both) %>%
filter(rn!="(Intercept)")
# combine
all_coefs <- left_join(exp_p, coif, by = "rn") %>%
mutate(logres = paste(expcoef, " ", ci_both, "; ", pval, ")", sep = "")) %>%
dplyr::select(rn, logres)
return(all_coefs)
} else {
stop("The model should be a logistic regression.")
}
}
CleanLog(res, alpha = 0.5)
CleanLog(res)
res <- glm(outcome ~ age+time, data = lung, family = "binomial")
CleanLog(res)
res <- glm(outcome ~ age+ph.ecog+pat.karno, data = lung, family = "binomial")
CleanLog(res)
document()
?CleanLog
document()
?CleanLog
document()
?CleanLog
test <- data.frame(
id = c(1:10),
status = c(F, T, T, F, T, T, F, F, T, F),
gr_var = c("a", "b", "b", "a", "a", "a", "b", "b", "b", "a")
)
test
df <- test
colnames(df)[which(colnames(df)==gr_var)] <- "gr_var"
colnames(df)[which(colnames(df)==status_var)] <- "status_var"
df <- test
gr_var = "gr_var"
status = "status_var"
colnames(df)[which(colnames(df)==gr_var)] <- "gr_var"
colnames(df)[which(colnames(df)==status_var)] <- "status_var"
status_var = "status"
colnames(df)[which(colnames(df)==gr_var)] <- "gr_var"
colnames(df)[which(colnames(df)==status_var)] <- "status_var"
df
tb1 <- table(df$gr_var)
tb2 <- table(df$gr_var, df$status_var)
n_exposed <- tb1[2]
n_ctrl <- tb1[1]
o_exposed <- tb2[4]
o_ctrl <- tb2[3]
p_exposed <- paste(round((o_exposed/n_exposed)*100, 1), "%", sep = "")
p_ctrl <- paste(round((o_ctrl/n_ctrl)*100, 1), "%", sep = "")
res_exposed <- paste(o_exposed, " / ", n_exposed, " (", p_exposed, ")", sep = "")
res_ctrl <- paste(o_ctrl, " / ", n_ctrl, " (", p_ctrl, ")", sep = "")
resdf <- data.frame(
var = c("with", "without"),
res = c(res_exposed, res_ctrl))
colnames(resdf) <- c("", "event / N (%)")
resdf
use_r("FreqOutcome")
document()
?tablena
document()
?tablena
document()
document()
?tablena
document()
?CleanLog
test <- data.frame(
id = c(1:10),
status = c(F, T, T, F, T, T, F, F, T, F),
gr_var = c("a", "b", "b", "a", "a", "a", "b", "b", "b", "a")
)
FreqOutcome <- function(gr_var, status_var, df){
colnames(df)[which(colnames(df)==gr_var)] <- "gr_var"
colnames(df)[which(colnames(df)==status_var)] <- "status_var"
tb1 <- table(df$gr_var)
tb2 <- table(df$gr_var, df$status_var)
n_exposed <- tb1[2]
n_ctrl <- tb1[1]
o_exposed <- tb2[4]
o_ctrl <- tb2[3]
p_exposed <- paste(round((o_exposed/n_exposed)*100, 1), "%", sep = "")
p_ctrl <- paste(round((o_ctrl/n_ctrl)*100, 1), "%", sep = "")
res_exposed <- paste(o_exposed, " / ", n_exposed, " (", p_exposed, ")", sep = "")
res_ctrl <- paste(o_ctrl, " / ", n_ctrl, " (", p_ctrl, ")", sep = "")
resdf <- data.frame(
var = c("with", "without"),
res = c(res_exposed, res_ctrl))
colnames(resdf) <- c("", "events / N (%)")
return(resdf)
}
FreqOutcome(gr_var = gr_var, status_var = status)
FreqOutcome(gr_var = "gr_var", status_var = "status")
FreqOutcome(gr_var = "gr_var", status_var = "status", data = test)
test
test <- data.frame(
id = c(1:10),
status = c(F, T, T, F, T, T, F, F, T, F),
gr_var = c("a", "b", "b", "a", "a", "a", "b", "b", "b", "a")
)
test
FreqOutcome <- function(gr_var, status_var, df){
colnames(df)[which(colnames(df)==gr_var)] <- "gr_var"
colnames(df)[which(colnames(df)==status_var)] <- "status_var"
tb1 <- table(df$gr_var)
tb2 <- table(df$gr_var, df$status_var)
n_exposed <- tb1[2]
n_ctrl <- tb1[1]
o_exposed <- tb2[4]
o_ctrl <- tb2[3]
p_exposed <- paste(round((o_exposed/n_exposed)*100, 1), "%", sep = "")
p_ctrl <- paste(round((o_ctrl/n_ctrl)*100, 1), "%", sep = "")
res_exposed <- paste(o_exposed, " / ", n_exposed, " (", p_exposed, ")", sep = "")
res_ctrl <- paste(o_ctrl, " / ", n_ctrl, " (", p_ctrl, ")", sep = "")
resdf <- data.frame(
var = c("with", "without"),
res = c(res_exposed, res_ctrl))
colnames(resdf) <- c("", "events / N (%)")
return(resdf)
}
test
FreqOutcome(gr_var = "gr_var", status_var = "status", df = test)
FreqOutcome(gr_var = "gr_var", status_var = "status", df = test) %>% class
FreqOutcome <- function(gr_var, status_var, df, first_level = NULL){
colnames(df)[which(colnames(df)==gr_var)] <- "gr_var"
colnames(df)[which(colnames(df)==status_var)] <- "status_var"
if(class(df$gr_var)%in%c("character", "factor")) {
df <- df %>% mutate(gr_var = as.factor(as.character(gr_var))) %>%
mutate(gr_var = fct_relevel(gr_var, first_level))
}
tb1 <- table(df$gr_var)
tb2 <- table(df$gr_var, df$status_var)
n_exposed <- tb1[2]
n_ctrl <- tb1[1]
o_exposed <- tb2[4]
o_ctrl <- tb2[3]
p_exposed <- paste(round((o_exposed/n_exposed)*100, 1), "%", sep = "")
p_ctrl <- paste(round((o_ctrl/n_ctrl)*100, 1), "%", sep = "")
res_exposed <- paste(o_exposed, " / ", n_exposed, " (", p_exposed, ")", sep = "")
res_ctrl <- paste(o_ctrl, " / ", n_ctrl, " (", p_ctrl, ")", sep = "")
resdf <- data.frame(
var = c("with", "without"),
res = c(res_exposed, res_ctrl))
colnames(resdf) <- c("", "events / N (%)")
return(resdf)
}
FreqOutcome(gr_var = "gr_var", status_var = "status", df = test) %>% class
FreqOutcome(gr_var = "gr_var", status_var = "status", df = test)
FreqOutcome(gr_var = "gr_var", status_var = "status", df = test, first_level = "b")
df %>% pull(gr_var)
test %>% pull(gr_var)
test %>% pull(gr_var) %>% unique
test %>% pull(gr_var) %>% unique %>% length()
FreqOutcome <- function(gr_var, status_var, df, exposed_level = NULL){
colnames(df)[which(colnames(df)==gr_var)] <- "gr_var"
colnames(df)[which(colnames(df)==status_var)] <- "status_var"
## Exclusion criteria --------------
#### outcome
if(class(df$status_var)!="logical") stop("The outcome (status_var) has to be logical (TRUE/FALSE).")
#### gr_var - only two levels
if((df %>% pull(gr_var) %>% unique %>% length)!= 2) stop("The grouping variable (gr_var) has to have exactly two levels (e.g., TRUE, FALSE).")
## Modify data to control the first level
if(class(df$gr_var)%in%c("character", "factor")) {
df <- df %>% mutate(gr_var = as.factor(as.character(gr_var))) %>%
mutate(gr_var = fct_relevel(gr_var, exposed_level))
}
## Table --------------------------
tb1 <- table(df$gr_var)
tb2 <- table(df$gr_var, df$status_var)
n_exposed <- tb1[2]
n_ctrl <- tb1[1]
o_exposed <- tb2[4]
o_ctrl <- tb2[3]
p_exposed <- paste(round((o_exposed/n_exposed)*100, 1), "%", sep = "")
p_ctrl <- paste(round((o_ctrl/n_ctrl)*100, 1), "%", sep = "")
res_exposed <- paste(o_exposed, " / ", n_exposed, " (", p_exposed, ")", sep = "")
res_ctrl <- paste(o_ctrl, " / ", n_ctrl, " (", p_ctrl, ")", sep = "")
resdf <- data.frame(
var = c("exposed", "not exposed"),
res = c(res_exposed, res_ctrl))
colnames(resdf) <- c("", "events / N (%)")
return(resdf)
}
FreqOutcome(gr_var = "gr_var", status_var = "status", df = test)
FreqOutcome(gr_var = "gr_var", status_var = "status", df = test, exposed_level = "b")
FreqOutcome(gr_var = "gr_var", status_var = "status", df = test)
FreqOutcome <- function(gr_var, status_var, df, exposed_level = NULL){
colnames(df)[which(colnames(df)==gr_var)] <- "gr_var"
colnames(df)[which(colnames(df)==status_var)] <- "status_var"
## Exclusion criteria --------------
#### outcome
if(class(df$status_var)!="logical") stop("The outcome (status_var) has to be logical (TRUE/FALSE).")
#### gr_var - only two levels
if((df %>% pull(gr_var) %>% unique %>% length)!= 2) stop("The grouping variable (gr_var) has to have exactly two levels (e.g., TRUE, FALSE).")
## Modify data to control the first level
if(class(df$gr_var)%in%c("character", "factor")) {
if(is.null(exposed_level)) stop("Please add the exposed level of the grouping variable. Alternatively, you can use a logical variable (TRUE/FALSE).")
df <- df %>% mutate(gr_var = as.factor(as.character(gr_var))) %>%
mutate(gr_var = fct_relevel(gr_var, exposed_level))
}
## Table --------------------------
tb1 <- table(df$gr_var)
tb2 <- table(df$gr_var, df$status_var)
n_exposed <- tb1[2]
n_ctrl <- tb1[1]
o_exposed <- tb2[4]
o_ctrl <- tb2[3]
p_exposed <- paste(round((o_exposed/n_exposed)*100, 1), "%", sep = "")
p_ctrl <- paste(round((o_ctrl/n_ctrl)*100, 1), "%", sep = "")
res_exposed <- paste(o_exposed, " / ", n_exposed, " (", p_exposed, ")", sep = "")
res_ctrl <- paste(o_ctrl, " / ", n_ctrl, " (", p_ctrl, ")", sep = "")
resdf <- data.frame(
var = c("exposed", "not exposed"),
res = c(res_exposed, res_ctrl))
colnames(resdf) <- c("", "events / N (%)")
return(resdf)
}
FreqOutcome(gr_var = "gr_var", status_var = "status", df = test)
FreqOutcome(gr_var = "gr_var", status_var = "status", df = test, exposed_level = "a")
FreqOutcome(gr_var = "gr_var", status_var = "id", df = test, exposed_level = "a")
FreqOutcome(gr_var = "id", status_var = "status", df = test, exposed_level = "a")
FreqOutcome(gr_var = "id", status_var = "status", df = test)
test <- data.frame(
id = c(1:10),
status = c(F, T, T, F, T, T, F, F, T, F),
gr = c("a", "b", "b", "a", "a", "a", "b", "b", "b", "a")
)
FreqOutcome(gr_var = "id", status_var = "status", df = test)
#### gr_var - only two levels
if((df %>% pull(gr_var) %>% unique %>% length)!= 2) stop("The grouping variable (gr_var) has to have exactly 2 levels (e.g., TRUE, FALSE).")
FreqOutcome <- function(gr_var, status_var, df, exposed_level = NULL){
colnames(df)[which(colnames(df)==gr_var)] <- "gr_var"
colnames(df)[which(colnames(df)==status_var)] <- "status_var"
## Exclusion criteria --------------
#### outcome
if(class(df$status_var)!="logical") stop("The outcome (status_var) has to be logical (TRUE/FALSE).")
#### gr_var - only two levels
if((df %>% pull(gr_var) %>% unique %>% length)!= 2) stop("The grouping variable (gr_var) has to have exactly 2 levels (e.g., TRUE, FALSE).")
## Modify data to control the first level
if(class(df$gr_var)%in%c("character", "factor")) {
if(is.null(exposed_level)) stop("Please add the exposed level of the grouping variable. Alternatively, you can use a logical variable (TRUE/FALSE).")
df <- df %>% mutate(gr_var = as.factor(as.character(gr_var))) %>%
mutate(gr_var = fct_relevel(gr_var, exposed_level))
}
## Table --------------------------
tb1 <- table(df$gr_var)
tb2 <- table(df$gr_var, df$status_var)
n_exposed <- tb1[2]
n_ctrl <- tb1[1]
o_exposed <- tb2[4]
o_ctrl <- tb2[3]
p_exposed <- paste(round((o_exposed/n_exposed)*100, 1), "%", sep = "")
p_ctrl <- paste(round((o_ctrl/n_ctrl)*100, 1), "%", sep = "")
res_exposed <- paste(o_exposed, " / ", n_exposed, " (", p_exposed, ")", sep = "")
res_ctrl <- paste(o_ctrl, " / ", n_ctrl, " (", p_ctrl, ")", sep = "")
resdf <- data.frame(
var = c("exposed", "not exposed"),
res = c(res_exposed, res_ctrl))
colnames(resdf) <- c("", "events / N (%)")
return(resdf)
}
#### gr_var - only two levels
if((df %>% pull(gr_var) %>% unique %>% length)!= 2) stop("The grouping variable (gr_var) has to have exactly 2 levels (e.g., TRUE, FALSE).")
FreqOutcome(gr_var = "id", status_var = "status", df = test)
test <- data.frame(
id = c(1:10),
death = c(F, T, T, F, T, T, F, F, T, F),
tt = c("a", "b", "b", "a", "a", "a", "b", "b", "b", "a")
)
FreqOutcome(gr_var = "tt", status_var = "death", df = test)
FreqOutcome(gr_var = "tt", status_var = "death", df = test, exposed_level = ""a)
FreqOutcome(gr_var = "tt", status_var = "death", df = test, exposed_level = "a")
document()
document()
?FreqOutcome
library(devtools)
document()
library(devtools)
#> Loading required package: usethis
use_r("CleanLM")
?table()
library(devtools)
check()
document()
check()
install()
